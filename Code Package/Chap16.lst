listing 1
// Some simple math functions.  
 
package appfuncs.simplefuncs; 
 
public class SimpleMathFuncs { 
 
  // Determine if a is a factor of b. 
  public static boolean isFactor(int a, int b) { 
    if((b%a) == 0) return true; 
    return false; 
  } 
 
  // Return the smallest positive factor that a and b have in common. 
  public static int lcf(int a, int b) { 
    // Factor using positive values. 
    a = Math.abs(a); 
    b = Math.abs(b); 
 
    int min = a < b ? a : b; 
 
    for(int i = 2; i <= min/2; i++) { 
      if(isFactor(i, a) && isFactor(i, b))  
        return i; 
    } 
 
    return 1;     
  } 
 
  // Return the largest positive factor that a and b have in common. 
  public static int gcf(int a, int b) { 
    // Factor using positive values. 
    a = Math.abs(a); 
    b = Math.abs(b); 
 
    int min = a < b ? a : b; 
 
    for(int i = min/2; i >= 2; i--) { 
      if(isFactor(i, a) && isFactor(i, b))  
        return i; 
    } 
 
    return 1;     
  } 
}

listing 2
// Demonstrate a simple module-based application. 
package appstart.mymodappdemo; 
 
import appfuncs.simplefuncs.SimpleMathFuncs; 
 
public class MyModAppDemo { 
  public static void main(String[] args) { 
 
    if(SimpleMathFuncs.isFactor(2, 10)) 
      System.out.println("2 is a factor of 10");  
 
    System.out.println("Smallest factor common to both 35 and 105 is " + 
                       SimpleMathFuncs.lcf(35, 105));  
 
    System.out.println("Largest factor common to both 35 and 105 is " + 
                       SimpleMathFuncs.gcf(35, 105));  
 
  } 
}

listing 3
// Module definition for the functions module. 
module appfuncs { 
  // Exports the package appfuncs.simplefuncs. 
  exports appfuncs.simplefuncs; 
}

listing 4
// Module definition for the main application module. 
module appstart { 
  // Requires the module appfuncs. 
  requires appfuncs; 
}

listing 5
// Module definition that uses a to clause. 
module appfuncs { 
  // Exports the package appfuncs.simplefuncs to appstart. 
  exports appfuncs.simplefuncs to appstart; 
}

listing 6
// Support functions. 
 
package appsupport.supportfuncs; 
 
public class SupportFuncs { 
 
  // Determine if a is a factor of b. 
  public static boolean isFactor(int a, int b) { 
    if((b%a) == 0) return true; 
    return false; 
  } 
}

listing 7
// Module definition for appsupport. 
module appsupport { 
  exports appsupport.supportfuncs; 
}

listing 8
// Some simple math functions, with isFactor() removed. 
 
package appfuncs.simplefuncs;
import appsupport.supportfuncs.SupportFuncs; 
 
public class SimpleMathFuncs { 
 
  // Return the smallest positive factor that a and b have in common. 
  public static int lcf(int a, int b) { 
    // Factor using positive values. 
    a = Math.abs(a); 
    b = Math.abs(b); 
 
    int min = a < b ? a : b; 
 
    for(int i = 2; i <= min/2; i++) { 
      if(SupportFuncs.isFactor(i, a) && SupportFuncs.isFactor(i, b))  
        return i; 
    } 
 
    return 1;     
  } 
 
  // Return the largest positive factor that a and b have in common. 
  public static int gcf(int a, int b) { 
    // Factor using positive values. 
    a = Math.abs(a); 
    b = Math.abs(b); 
 
    int min = a < b ? a : b; 
 
    for(int i = min/2; i >= 2; i--) { 
      if(SupportFuncs.isFactor(i, a) && SupportFuncs.isFactor(i, b))  
        return i; 
    } 
 
    return 1;     
  } 
}

listing 9
// Module definition for appfuncs. 
module appfuncs { 
  // Exports the package appfuncs.simplefuncs. 
  exports appfuncs.simplefuncs; 
 
  // Requires appsupport and makes it public 
  requires transitive appsupport; 
}

listing 10
// Updated to use SupportFuncs. 
package appstart.mymodappdemo; 
 
import appfuncs.simplefuncs.SimpleMathFuncs; 
import appsupport.supportfuncs.SupportFuncs; 
 
public class MyModAppDemo { 
  public static void main(String[] args) { 
 
    // Now, isFactor() is referred to via SupportFuncs, 
    // not SimpleMathFuncs. 
    if(SupportFuncs.isFactor(2, 10)) 
      System.out.println("2 is a factor of 10");  
 
    System.out.println("Smallest factor common to both 35 and 105 is " + 
                       SimpleMathFuncs.lcf(35, 105));  
 
    System.out.println("Largest factor common to both 35 and 105 is " + 
                       SimpleMathFuncs.gcf(35, 105));  
 
  } 
}

listing 11
// This interface defines a function that takes two int 
// arguments and returns an int result. Thus, it can 
// describe any binary operation on two ints that 
// returns an int. 
 
package userfuncs.binaryfuncs; 
 
public interface BinaryFunc { 
  // Obtain the name of the function. 
  public String getName(); 
 
  // This is the function to perform. It will be 
  // provided by specific implementations. 
  public int func(int a, int b); 
}

listing 12
// This interface defines the form of a service provider that 
// obtains BinaryFunc instances. 
package userfuncs.binaryfuncs; 
 
import userfuncs.binaryfuncs.BinaryFunc; 
 
public interface BinFuncProvider { 
 
  // Obtain a BinaryFunc. 
  public BinaryFunc get(); 
}

listing 13
// AbsPlus provides a concrete implementation of 
// BinaryFunc. It returns the result of abs(a) + abs(b). 
package userfuncsimp.binaryfuncsimp; 
 
import userfuncs.binaryfuncs.BinaryFunc; 
 
public class AbsPlus implements BinaryFunc { 
 
  // Return name of this function. 
  public String getName() { 
    return "absPlus"; 
  } 
 
  // Implement the AbsPlus function. 
  public int func(int a, int b) { return Math.abs(a) + Math.abs(b); } 
}

listing 14
// AbsMinus provides a concrete implementation of 
// BinaryFunc. It returns the result of abs(a) - abs(b). 
 
package userfuncsimp.binaryfuncsimp; 
 
import userfuncs.binaryfuncs.BinaryFunc; 
 
public class AbsMinus implements BinaryFunc { 
 
  // Return name of this function. 
  public String getName() { 
    return "absMinus"; 
  } 
 
  // Implement the AbsMinus function. 
  public int func(int a, int b) { return Math.abs(a) - Math.abs(b); } 
}

listing 15
// This is a provider for the AbsPlus function. 
 
package userfuncsimp.binaryfuncsimp; 
 
import userfuncs.binaryfuncs.*; 
 
public class AbsPlusProvider implements BinFuncProvider { 
 
  // Provide an AbsPlus object. 
  public BinaryFunc get() { return new AbsPlus(); } 
}

listing 16
// This is a provider for the AbsMinus function. 
 
package userfuncsimp.binaryfuncsimp; 
 
import userfuncs.binaryfuncs.*; 
 
public class AbsMinusProvider implements BinFuncProvider { 
 
  // Provide an AbsMinus object. 
  public BinaryFunc get() { return new AbsMinus(); } 
}

listing 17
module userfuncs { 
  exports userfuncs.binaryfuncs; 
}

listing 18
module userfuncsimp {
  requires userfuncs;

  provides userfuncs.binaryfuncs.BinFuncProvider with
    userfuncsimp.binaryfuncsimp.AbsPlusProvider,
    userfuncsimp.binaryfuncsimp.AbsMinusProvider;
}


listing 19
// A module-based application that demonstrates services 
// and service providers. 
 
package appstart.mymodappdemo; 
 
import java.util.ServiceLoader; 
 
import appfuncs.simplefuncs.SimpleMathFuncs; 
import userfuncs.binaryfuncs.*; 
 
public class MyModAppDemo { 
  public static void main(String[] args) { 
 
    // First, use built-in functions as before. 
    if(SimpleMathFuncs.isFactor(2, 10)) 
      System.out.println("2 is a factor of 10");  
 
    System.out.println("Smallest factor common to both 35 and 105 is " + 
                       SimpleMathFuncs.lcf(35, 105));  
 
    System.out.println("Largest factor common to both 35 and 105 is " + 
                       SimpleMathFuncs.gcf(35, 105));  
 
 
    // Now, use service-based, user-defined operations. 
 
    // Get a service loader for binary functions. 
    ServiceLoader<BinFuncProvider> ldr = 
      ServiceLoader.load(BinFuncProvider.class); 
 
    BinaryFunc binOp = null; 
 
    // Find the provider for absPlus and obtain the function. 
    for(BinFuncProvider bfp : ldr) { 
      if(bfp.get().getName().equals("absPlus")) { 
        binOp = bfp.get(); 
        break; 
      } 
    } 
 
    if(binOp != null)  
      System.out.println("Result of absPlus function: " + 
                          binOp.func(12, -4)); 
    else 
      System.out.println("absPlus function not found"); 
 
    binOp = null; 
 
    // Now, find the provider for absMinus and obtain the function. 
    for(BinFuncProvider bfp : ldr) { 
      if(bfp.get().getName().equals("absMinus")) { 
        binOp = bfp.get(); 
        break; 
      } 
    } 
 
    if(binOp != null)  
      System.out.println("Result of absMinus function: " + 
                          binOp.func(12, -4)); 
    else 
      System.out.println("absMinus function not found"); 
 
  } 
}

listing 20
// Module definition for the main application module. 
// It now uses BinFuncProvider. 
module appstart { 
  // Requires the modules appfuncs and userfuncs. 
  requires appfuncs; 
  requires userfuncs; 
 
  // appstart now uses BinFuncProvider. 
  uses userfuncs.binaryfuncs.BinFuncProvider; 
}

